// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "ewallet-server-v1/models"
	mock "github.com/stretchr/testify/mock"
)

// WalletRepository is an autogenerated mock type for the WalletRepository type
type WalletRepository struct {
	mock.Mock
}

// GetWalletByIdUser provides a mock function with given fields: _a0, _a1
func (_m *WalletRepository) GetWalletByIdUser(_a0 context.Context, _a1 int64) (*models.Wallet, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Wallet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletByWalletNumber provides a mock function with given fields: _a0, _a1
func (_m *WalletRepository) GetWalletByWalletNumber(_a0 context.Context, _a1 string) (*models.Wallet, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Wallet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostCreateWalletUser provides a mock function with given fields: _a0, _a1
func (_m *WalletRepository) PostCreateWalletUser(_a0 context.Context, _a1 int64) (*models.Wallet, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Wallet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutChangeBalanceWallet provides a mock function with given fields: _a0, _a1, _a2
func (_m *WalletRepository) PutChangeBalanceWallet(_a0 context.Context, _a1 float64, _a2 int64) (*models.Wallet, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *models.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, float64, int64) *models.Wallet); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, float64, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWalletRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletRepository creates a new instance of WalletRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletRepository(t mockConstructorTestingTNewWalletRepository) *WalletRepository {
	mock := &WalletRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
