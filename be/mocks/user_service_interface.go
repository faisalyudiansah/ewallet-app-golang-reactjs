// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "ewallet-server-v1/dtos"
	mock "github.com/stretchr/testify/mock"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

// GetUserDetailService provides a mock function with given fields: _a0, _a1
func (_m *UserServiceInterface) GetUserDetailService(_a0 context.Context, _a1 int64) (*dtos.ResponseUserAndWallet, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dtos.ResponseUserAndWallet
	if rf, ok := ret.Get(0).(func(context.Context, int64) *dtos.ResponseUserAndWallet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResponseUserAndWallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostLoginUserService provides a mock function with given fields: _a0, _a1
func (_m *UserServiceInterface) PostLoginUserService(_a0 context.Context, _a1 dtos.RequestLoginUser) (*dtos.ResponseAccessToken, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dtos.ResponseAccessToken
	if rf, ok := ret.Get(0).(func(context.Context, dtos.RequestLoginUser) *dtos.ResponseAccessToken); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResponseAccessToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dtos.RequestLoginUser) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRegisterUserService provides a mock function with given fields: _a0, _a1
func (_m *UserServiceInterface) PostRegisterUserService(_a0 context.Context, _a1 dtos.RequestRegisterUser) (*dtos.ResponseUserAndWallet, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dtos.ResponseUserAndWallet
	if rf, ok := ret.Get(0).(func(context.Context, dtos.RequestRegisterUser) *dtos.ResponseUserAndWallet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResponseUserAndWallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dtos.RequestRegisterUser) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServiceInterface(t mockConstructorTestingTNewUserServiceInterface) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
