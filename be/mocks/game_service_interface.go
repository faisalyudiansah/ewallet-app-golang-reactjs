// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GameServiceInterface is an autogenerated mock type for the GameServiceInterface type
type GameServiceInterface struct {
	mock.Mock
}

// PostChooseGachaBoxService provides a mock function with given fields: _a0, _a1, _a2
func (_m *GameServiceInterface) PostChooseGachaBoxService(_a0 context.Context, _a1 int64, _a2 int) (float64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) float64); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStartGameService provides a mock function with given fields: _a0, _a1
func (_m *GameServiceInterface) PostStartGameService(_a0 context.Context, _a1 int64) ([]int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []int
	if rf, ok := ret.Get(0).(func(context.Context, int64) []int); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameServiceInterface creates a new instance of GameServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameServiceInterface(t mockConstructorTestingTNewGameServiceInterface) *GameServiceInterface {
	mock := &GameServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
