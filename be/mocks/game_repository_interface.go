// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "ewallet-server-v1/models"
	mock "github.com/stretchr/testify/mock"
)

// GameRepositoryInterface is an autogenerated mock type for the GameRepositoryInterface type
type GameRepositoryInterface struct {
	mock.Mock
}

// ChangeStatusBox provides a mock function with given fields: _a0, _a1
func (_m *GameRepositoryInterface) ChangeStatusBox(_a0 context.Context, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGameBox provides a mock function with given fields: _a0, _a1, _a2
func (_m *GameRepositoryInterface) CreateGameBox(_a0 context.Context, _a1 int64, _a2 []int) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGameBox provides a mock function with given fields: _a0, _a1
func (_m *GameRepositoryInterface) GetGameBox(_a0 context.Context, _a1 int64) (*models.GameBox, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.GameBox
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.GameBox); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GameBox)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameRepositoryInterface creates a new instance of GameRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameRepositoryInterface(t mockConstructorTestingTNewGameRepositoryInterface) *GameRepositoryInterface {
	mock := &GameRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
