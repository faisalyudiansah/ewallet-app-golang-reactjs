// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "ewallet-server-v1/models"
	mock "github.com/stretchr/testify/mock"
)

// TransactionUserRepository is an autogenerated mock type for the TransactionUserRepository type
type TransactionUserRepository struct {
	mock.Mock
}

// GetListTransactionsRepository provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8
func (_m *TransactionUserRepository) GetListTransactionsRepository(_a0 context.Context, _a1 int64, _a2 string, _a3 string, _a4 string, _a5 int64, _a6 int64, _a7 string, _a8 string) ([]models.TransactionUserAndSourceOfFund, int64, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)

	var r0 []models.TransactionUserAndSourceOfFund
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, string, int64, int64, string, string) []models.TransactionUserAndSourceOfFund); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TransactionUserAndSourceOfFund)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string, string, int64, int64, string, string) int64); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64, string, string, string, int64, int64, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PostNewTransaction provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *TransactionUserRepository) PostNewTransaction(_a0 context.Context, _a1 int64, _a2 int64, _a3 float64, _a4 string, _a5 string) (*models.Transaction, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, float64, string, string) *models.Transaction); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, float64, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTransactionUserPivot provides a mock function with given fields: _a0, _a1, _a2
func (_m *TransactionUserRepository) PostTransactionUserPivot(_a0 context.Context, _a1 int64, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionUserRepository creates a new instance of TransactionUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionUserRepository(t mockConstructorTestingTNewTransactionUserRepository) *TransactionUserRepository {
	mock := &TransactionUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
