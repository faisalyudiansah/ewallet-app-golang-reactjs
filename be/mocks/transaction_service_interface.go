// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "git.garena.com/sea-labs-id/bootcamp/batch-04/faisal.yudiansah/assignment-e-wallet-rest-api/dtos"
	mock "github.com/stretchr/testify/mock"
)

// TransactionServiceInterface is an autogenerated mock type for the TransactionServiceInterface type
type TransactionServiceInterface struct {
	mock.Mock
}

// GetListTransactionsUserService provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8
func (_m *TransactionServiceInterface) GetListTransactionsUserService(_a0 context.Context, _a1 int64, _a2 string, _a3 string, _a4 string, _a5 int64, _a6 int64, _a7 string, _a8 string) ([]dtos.ResponseSingleDataTransactionUser, int64, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)

	var r0 []dtos.ResponseSingleDataTransactionUser
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, string, int64, int64, string, string) []dtos.ResponseSingleDataTransactionUser); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.ResponseSingleDataTransactionUser)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string, string, int64, int64, string, string) int64); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64, string, string, string, int64, int64, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewTransactionServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionServiceInterface creates a new instance of TransactionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionServiceInterface(t mockConstructorTestingTNewTransactionServiceInterface) *TransactionServiceInterface {
	mock := &TransactionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
