// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "git.garena.com/sea-labs-id/bootcamp/batch-04/faisal.yudiansah/assignment-e-wallet-rest-api/dtos"
	mock "github.com/stretchr/testify/mock"
)

// WalletServiceInterface is an autogenerated mock type for the WalletServiceInterface type
type WalletServiceInterface struct {
	mock.Mock
}

// PostTransferFundService provides a mock function with given fields: _a0, _a1, _a2
func (_m *WalletServiceInterface) PostTransferFundService(_a0 context.Context, _a1 dtos.RequestTransferFund, _a2 int64) (*dtos.ResponseSuccessTransfer, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *dtos.ResponseSuccessTransfer
	if rf, ok := ret.Get(0).(func(context.Context, dtos.RequestTransferFund, int64) *dtos.ResponseSuccessTransfer); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResponseSuccessTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dtos.RequestTransferFund, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTopWalletService provides a mock function with given fields: _a0, _a1, _a2
func (_m *WalletServiceInterface) PutTopWalletService(_a0 context.Context, _a1 dtos.RequestTopUpWallet, _a2 int64) (*dtos.ResponseUserAndWallet, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *dtos.ResponseUserAndWallet
	if rf, ok := ret.Get(0).(func(context.Context, dtos.RequestTopUpWallet, int64) *dtos.ResponseUserAndWallet); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResponseUserAndWallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dtos.RequestTopUpWallet, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWalletServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletServiceInterface creates a new instance of WalletServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletServiceInterface(t mockConstructorTestingTNewWalletServiceInterface) *WalletServiceInterface {
	mock := &WalletServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
