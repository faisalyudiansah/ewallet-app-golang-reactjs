// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "git.garena.com/sea-labs-id/bootcamp/batch-04/faisal.yudiansah/assignment-e-wallet-rest-api/dtos"
	mock "github.com/stretchr/testify/mock"
)

// ResetPasswordInterface is an autogenerated mock type for the ResetPasswordInterface type
type ResetPasswordInterface struct {
	mock.Mock
}

// PostForgetPasswordService provides a mock function with given fields: _a0, _a1
func (_m *ResetPasswordInterface) PostForgetPasswordService(_a0 context.Context, _a1 dtos.RequestForgetPassword) (*dtos.ResponseTokenResetPassword, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dtos.ResponseTokenResetPassword
	if rf, ok := ret.Get(0).(func(context.Context, dtos.RequestForgetPassword) *dtos.ResponseTokenResetPassword); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResponseTokenResetPassword)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dtos.RequestForgetPassword) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResetPasswordService provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ResetPasswordInterface) PutResetPasswordService(_a0 context.Context, _a1 string, _a2 dtos.RequestResetPassword, _a3 int64) (*dtos.ResponseUser, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *dtos.ResponseUser
	if rf, ok := ret.Get(0).(func(context.Context, string, dtos.RequestResetPassword, int64) *dtos.ResponseUser); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResponseUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, dtos.RequestResetPassword, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewResetPasswordInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewResetPasswordInterface creates a new instance of ResetPasswordInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResetPasswordInterface(t mockConstructorTestingTNewResetPasswordInterface) *ResetPasswordInterface {
	mock := &ResetPasswordInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
