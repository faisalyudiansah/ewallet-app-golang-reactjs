// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	appdto "ewallet-server-v2/internal/dto/appdto"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"

	model "ewallet-server-v2/internal/model"

	pagedto "ewallet-server-v2/internal/dto/pagedto"

	time "time"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// CreateOne provides a mock function with given fields: ctx, transaction
func (_m *TransactionRepository) CreateOne(ctx context.Context, transaction model.Transaction) (*model.Transaction, error) {
	ret := _m.Called(ctx, transaction)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, model.Transaction) *model.Transaction); ok {
		r0 = rf(ctx, transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByWalletId provides a mock function with given fields: ctx, walletId, pageDto
func (_m *TransactionRepository) GetListByWalletId(ctx context.Context, walletId int64, pageDto pagedto.PageSortDto) (*appdto.TransactionListDto, error) {
	ret := _m.Called(ctx, walletId, pageDto)

	var r0 *appdto.TransactionListDto
	if rf, ok := ret.Get(0).(func(context.Context, int64, pagedto.PageSortDto) *appdto.TransactionListDto); ok {
		r0 = rf(ctx, walletId, pageDto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appdto.TransactionListDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, pagedto.PageSortDto) error); ok {
		r1 = rf(ctx, walletId, pageDto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThisMonthTransactionSum provides a mock function with given fields: ctx, walletId, startDate, endDate
func (_m *TransactionRepository) GetThisMonthTransactionSum(ctx context.Context, walletId int64, startDate time.Time, endDate time.Time) (*appdto.TransactionSum, error) {
	ret := _m.Called(ctx, walletId, startDate, endDate)

	var r0 *appdto.TransactionSum
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time, time.Time) *appdto.TransactionSum); ok {
		r0 = rf(ctx, walletId, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appdto.TransactionSum)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time, time.Time) error); ok {
		r1 = rf(ctx, walletId, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionType provides a mock function with given fields: ctx
func (_m *TransactionRepository) GetTransactionType(ctx context.Context) ([]model.TransactionType, error) {
	ret := _m.Called(ctx)

	var r0 []model.TransactionType
	if rf, ok := ret.Get(0).(func(context.Context) []model.TransactionType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TransactionType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionTypeSumMultiple provides a mock function with given fields: ctx, walletId, transactionTypeId, transactionAdditionalDetailId, minAmount
func (_m *TransactionRepository) GetTransactionTypeSumMultiple(ctx context.Context, walletId int64, transactionTypeId int64, transactionAdditionalDetailId []int64, minAmount decimal.Decimal) (*decimal.Decimal, error) {
	ret := _m.Called(ctx, walletId, transactionTypeId, transactionAdditionalDetailId, minAmount)

	var r0 *decimal.Decimal
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, []int64, decimal.Decimal) *decimal.Decimal); ok {
		r0 = rf(ctx, walletId, transactionTypeId, transactionAdditionalDetailId, minAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*decimal.Decimal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, []int64, decimal.Decimal) error); ok {
		r1 = rf(ctx, walletId, transactionTypeId, transactionAdditionalDetailId, minAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionRepository(t mockConstructorTestingTNewTransactionRepository) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
