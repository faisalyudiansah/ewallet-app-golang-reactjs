// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "ewallet-server-v2/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ResetPasswordAttemptRepository is an autogenerated mock type for the ResetPasswordAttemptRepository type
type ResetPasswordAttemptRepository struct {
	mock.Mock
}

// CreateOne provides a mock function with given fields: ctx, resetPasswordAttempt
func (_m *ResetPasswordAttemptRepository) CreateOne(ctx context.Context, resetPasswordAttempt model.ResetPasswordAttempt) (*model.ResetPasswordAttempt, error) {
	ret := _m.Called(ctx, resetPasswordAttempt)

	var r0 *model.ResetPasswordAttempt
	if rf, ok := ret.Get(0).(func(context.Context, model.ResetPasswordAttempt) *model.ResetPasswordAttempt); ok {
		r0 = rf(ctx, resetPasswordAttempt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ResetPasswordAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.ResetPasswordAttempt) error); ok {
		r1 = rf(ctx, resetPasswordAttempt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByUserId provides a mock function with given fields: ctx, userId
func (_m *ResetPasswordAttemptRepository) GetAllByUserId(ctx context.Context, userId int64) ([]model.ResetPasswordAttempt, error) {
	ret := _m.Called(ctx, userId)

	var r0 []model.ResetPasswordAttempt
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.ResetPasswordAttempt); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ResetPasswordAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneActiveByUserIdAndCode provides a mock function with given fields: ctx, userId, code
func (_m *ResetPasswordAttemptRepository) GetOneActiveByUserIdAndCode(ctx context.Context, userId int64, code string) (*model.ResetPasswordAttempt, error) {
	ret := _m.Called(ctx, userId, code)

	var r0 *model.ResetPasswordAttempt
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *model.ResetPasswordAttempt); ok {
		r0 = rf(ctx, userId, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ResetPasswordAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, userId, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDeleteByIds provides a mock function with given fields: ctx, attemptIds
func (_m *ResetPasswordAttemptRepository) SoftDeleteByIds(ctx context.Context, attemptIds []int64) error {
	ret := _m.Called(ctx, attemptIds)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) error); ok {
		r0 = rf(ctx, attemptIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewResetPasswordAttemptRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewResetPasswordAttemptRepository creates a new instance of ResetPasswordAttemptRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResetPasswordAttemptRepository(t mockConstructorTestingTNewResetPasswordAttemptRepository) *ResetPasswordAttemptRepository {
	mock := &ResetPasswordAttemptRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
