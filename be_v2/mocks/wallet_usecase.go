// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	model "ewallet-server-v2/internal/model"
)

// WalletUsecase is an autogenerated mock type for the WalletUsecase type
type WalletUsecase struct {
	mock.Mock
}

// CreateOne provides a mock function with given fields: ctx, userId
func (_m *WalletUsecase) CreateOne(ctx context.Context, userId int64) (*model.Wallet, error) {
	ret := _m.Called(ctx, userId)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Wallet); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneByIdWithLock provides a mock function with given fields: ctx, walletId
func (_m *WalletUsecase) GetOneByIdWithLock(ctx context.Context, walletId int64) (*model.Wallet, error) {
	ret := _m.Called(ctx, walletId)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Wallet); ok {
		r0 = rf(ctx, walletId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, walletId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneByNumber provides a mock function with given fields: ctx, walletNumber
func (_m *WalletUsecase) GetOneByNumber(ctx context.Context, walletNumber string) (*model.Wallet, error) {
	ret := _m.Called(ctx, walletNumber)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Wallet); ok {
		r0 = rf(ctx, walletNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneByNumberWithLock provides a mock function with given fields: ctx, walletNumber
func (_m *WalletUsecase) GetOneByNumberWithLock(ctx context.Context, walletNumber string) (*model.Wallet, error) {
	ret := _m.Called(ctx, walletNumber)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Wallet); ok {
		r0 = rf(ctx, walletNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneByUserId provides a mock function with given fields: ctx, userId
func (_m *WalletUsecase) GetOneByUserId(ctx context.Context, userId int64) (*model.Wallet, error) {
	ret := _m.Called(ctx, userId)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Wallet); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOneAmountById provides a mock function with given fields: ctx, walletId, amount
func (_m *WalletUsecase) UpdateOneAmountById(ctx context.Context, walletId int64, amount decimal.Decimal) (*model.Wallet, error) {
	ret := _m.Called(ctx, walletId, amount)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int64, decimal.Decimal) *model.Wallet); ok {
		r0 = rf(ctx, walletId, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, decimal.Decimal) error); ok {
		r1 = rf(ctx, walletId, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWalletUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletUsecase creates a new instance of WalletUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletUsecase(t mockConstructorTestingTNewWalletUsecase) *WalletUsecase {
	mock := &WalletUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
