// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "ewallet-server-v2/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// CreateOne provides a mock function with given fields: ctx, email, hashedPassword, username, fullName
func (_m *UserUsecase) CreateOne(ctx context.Context, email string, hashedPassword string, username string, fullName string) (*model.User, error) {
	ret := _m.Called(ctx, email, hashedPassword, username, fullName)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *model.User); ok {
		r0 = rf(ctx, email, hashedPassword, username, fullName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, email, hashedPassword, username, fullName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneByEmail provides a mock function with given fields: ctx, email
func (_m *UserUsecase) GetOneByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneById provides a mock function with given fields: ctx, id
func (_m *UserUsecase) GetOneById(ctx context.Context, id int64) (*model.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneByWalletId provides a mock function with given fields: ctx, walletId
func (_m *UserUsecase) GetOneByWalletId(ctx context.Context, walletId int64) (*model.User, error) {
	ret := _m.Called(ctx, walletId)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.User); ok {
		r0 = rf(ctx, walletId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, walletId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOne provides a mock function with given fields: ctx, user
func (_m *UserUsecase) SaveOne(ctx context.Context, user model.User) (*model.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, model.User) *model.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: ctx, userId, user
func (_m *UserUsecase) UpdateOne(ctx context.Context, userId int64, user model.User) (*model.User, error) {
	ret := _m.Called(ctx, userId, user)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.User) *model.User); ok {
		r0 = rf(ctx, userId, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, model.User) error); ok {
		r1 = rf(ctx, userId, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
