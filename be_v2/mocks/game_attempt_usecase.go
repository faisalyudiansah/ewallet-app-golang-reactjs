// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "ewallet-server-v2/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// GameAttemptUsecase is an autogenerated mock type for the GameAttemptUsecase type
type GameAttemptUsecase struct {
	mock.Mock
}

// Attempt provides a mock function with given fields: ctx, walletId, boxId
func (_m *GameAttemptUsecase) Attempt(ctx context.Context, walletId int64, boxId int64) (*model.GameAttempt, error) {
	ret := _m.Called(ctx, walletId, boxId)

	var r0 *model.GameAttempt
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *model.GameAttempt); ok {
		r0 = rf(ctx, walletId, boxId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GameAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, walletId, boxId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateChances provides a mock function with given fields: ctx, walletId
func (_m *GameAttemptUsecase) CalculateChances(ctx context.Context, walletId int64) (int64, error) {
	ret := _m.Called(ctx, walletId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, walletId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, walletId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameAttemptUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameAttemptUsecase creates a new instance of GameAttemptUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameAttemptUsecase(t mockConstructorTestingTNewGameAttemptUsecase) *GameAttemptUsecase {
	mock := &GameAttemptUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
