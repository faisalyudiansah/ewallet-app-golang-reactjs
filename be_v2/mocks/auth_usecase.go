// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	authdto "ewallet-server-v2/internal/dto/authdto"

	mock "github.com/stretchr/testify/mock"

	model "ewallet-server-v2/internal/model"
)

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

// ConfirmResetPassword provides a mock function with given fields: ctx, email, password, code
func (_m *AuthUsecase) ConfirmResetPassword(ctx context.Context, email string, password string, code string) error {
	ret := _m.Called(ctx, email, password, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, email, password, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *AuthUsecase) Login(ctx context.Context, email string, password string) (*authdto.LoginDto, error) {
	ret := _m.Called(ctx, email, password)

	var r0 *authdto.LoginDto
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *authdto.LoginDto); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authdto.LoginDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, email, password, username, fullName
func (_m *AuthUsecase) Register(ctx context.Context, email string, password string, username string, fullName string) (*authdto.RegisterDto, error) {
	ret := _m.Called(ctx, email, password, username, fullName)

	var r0 *authdto.RegisterDto
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *authdto.RegisterDto); ok {
		r0 = rf(ctx, email, password, username, fullName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authdto.RegisterDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, email, password, username, fullName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, email
func (_m *AuthUsecase) ResetPassword(ctx context.Context, email string) (*model.ResetPasswordAttempt, error) {
	ret := _m.Called(ctx, email)

	var r0 *model.ResetPasswordAttempt
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ResetPasswordAttempt); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ResetPasswordAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthUsecase(t mockConstructorTestingTNewAuthUsecase) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
