// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PasswordEncryptor is an autogenerated mock type for the PasswordEncryptor type
type PasswordEncryptor struct {
	mock.Mock
}

// Check provides a mock function with given fields: password, hash
func (_m *PasswordEncryptor) Check(password string, hash string) bool {
	ret := _m.Called(password, hash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(password, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Hash provides a mock function with given fields: password
func (_m *PasswordEncryptor) Hash(password string) (string, error) {
	ret := _m.Called(password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPasswordEncryptor interface {
	mock.TestingT
	Cleanup(func())
}

// NewPasswordEncryptor creates a new instance of PasswordEncryptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPasswordEncryptor(t mockConstructorTestingTNewPasswordEncryptor) *PasswordEncryptor {
	mock := &PasswordEncryptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
