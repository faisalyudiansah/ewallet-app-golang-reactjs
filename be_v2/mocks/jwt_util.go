// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	jwtutils "ewallet-server-v2/internal/pkg/jwtutils"
	mock "github.com/stretchr/testify/mock"
)

// JwtUtil is an autogenerated mock type for the JwtUtil type
type JwtUtil struct {
	mock.Mock
}

// Parse provides a mock function with given fields: tokenString
func (_m *JwtUtil) Parse(tokenString string) (*jwtutils.MyAuthClaims, error) {
	ret := _m.Called(tokenString)

	var r0 *jwtutils.MyAuthClaims
	if rf, ok := ret.Get(0).(func(string) *jwtutils.MyAuthClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwtutils.MyAuthClaims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sign provides a mock function with given fields: userId
func (_m *JwtUtil) Sign(userId int64) (string, error) {
	ret := _m.Called(userId)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJwtUtil interface {
	mock.TestingT
	Cleanup(func())
}

// NewJwtUtil creates a new instance of JwtUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJwtUtil(t mockConstructorTestingTNewJwtUtil) *JwtUtil {
	mock := &JwtUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
